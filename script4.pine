//@version=4
strategy("Script that combines moving averages, Bollinger Bands, a greedy strategy, and both edge and triangle patterns")

// Function to detect triangle pattern
triangleup(low, high, close, len) =>
    t = 0.0
    n = len - 1
    for i = 0 to n
        a = low[i]
        b = high[i]
        c = close[i]
        for j = i+1 to n
            p = low[j]
            q = high[j]
            r = close[j]
            for k = j+1 to n
                x = low[k]
                y = high[k]
                z = close[k]
                if (a < p) and (p < x) and (b > q) and (q > y) and (c < r) and (r > z)
                    t := 1.0
    t

// Function to detect triangle pattern
triangledown(low, high, close, len) =>
    t = 0.0
    n = len - 1
    for i = 0 to n
        a = low[i]
        b = high[i]
        c = close[i]
        for j = i+1 to n
            p = low[j]
            q = high[j]
            r = close[j]
            for k = j+1 to n
                x = low[k]
                y = high[k]
                z = close[k]
                if (a > p) and (p > x) and (b < q) and (q < y) and (c > r) and (r < z)
                    t := 1.0
    t

// Define length of moving averages and standard deviation for Bollinger Bands
ma_length = input(title="Moving Average Length", type=input.integer, defval=20)
bb_length = input(title="Bollinger Band Length", type=input.integer, defval=20)
bb_stddev = input(title="Bollinger Band Standard Deviation", type=input.float, defval=2.0)

// Calculate moving averages and Bollinger Bands
ma = sma(close, ma_length)
upper_band = ma + bb_stddev * stdev(close, bb_length)
lower_band = ma - bb_stddev * stdev(close, bb_length)

// Plot moving averages and Bollinger Bands
plot(ma, color=color.blue, title="Moving Average")
plot(upper_band, color=color.green, title="Upper Bollinger Band")
plot(lower_band, color=color.red, title="Lower Bollinger Band")

// Define buy and sell signals based on greedy strategy and edge/triangle patterns
buy_signal = crossover(close, upper_band) and (falling(close, 5) or rising(close, 5) or triangleup(low, high, close, 3))
sell_signal = crossunder(close, lower_band) or triangledown(low, high, close, 3)

// Execute trades based on signals
if (buy_signal)
    strategy.entry("Buy", strategy.long)
if (sell_signal)
    strategy.entry("Sell", strategy.short)
